---
- name: Provision the infrastructure
  hosts: controller
  roles:
    # The provisioner role consumes the terraform adjacent to the playbook
    # and exports the created ec2_instances to inventory, while also registering
    # the other outputs from the terraform module for use later in the playbook
  - role: provisioner
    vars:
      cert_directory: '{{ playbook_dir }}/output'

- name: Wait for connectivity to all terraformed hosts
  hosts: terraformed
  tasks:
  - name: Confirm basic ansible connectivity
    ping:
  - name: Confirm connectivity reached all hosts
    run_once: true
    assert:
      that:
      - ansible_play_hosts == ansible_play_hosts_all
  - name: Wait for cloud-init to complete
    stat:
      path: /var/lib/cloud/instance/boot-finished
    register: boot_finished
    until: boot_finished.stat.exists
    retries: 60
    delay: 10

- name: Configure Red Hat Quay
  hosts: registry
  vars:
    registry_bucket: '{{ hostvars.controller.terraform.outputs.registry_bucket.value }}'
  roles:
  - role: jharmison_redhat.redhat_quay
    vars:
      registry_hostname: '{{ ansible_host }}'
      registry_storage_details:
        host: s3.{{ registry_bucket.region }}.amazonaws.com
        s3_bucket: '{{ registry_bucket.bucket }}'
        s3_access_key: '{{ registry_bucket.access_key }}'
        s3_secret_key: '{{ registry_bucket.secret_key }}'
      password_dir: '{{ playbook_dir }}/output'

- name: Configure Squid
  hosts: proxy
  become: true
  vars:
    ca_cert_and_key: '{{ hostvars.controller.ca.stdout }}'
    allowed_urls:
    - .{{ cluster_name }}.{{ cluster_domain }}
    - rhui3.{{ aws_region }}.aws.ce.redhat.com
  roles:
  - role: proxy

- name: Configure bastion to trust Squid
  hosts: bastion
  become: true
  vars:
    cert_directory: '{{ playbook_dir }}/output'
  tasks:
  - name: Place CA certificate in anchors
    copy:
      src: '{{ cert_directory }}/squid.crt'
      dest: /etc/pki/ca-trust/source/anchors/
    register: anchors
  - name: Update CA trust
    command: update-ca-trust
    when: anchors.changed
  - name: Update packages
    dnf:
      name: '*'
      state: latest
  - name: Install container-tools
    dnf:
      name: '@container-tools'
      state: installed
  - name: Check if reboot is needed
    command: dnf needs-rebooting -r
    failed_when: false
    register: needs_rebooting
  - name: Reboot node
    reboot:
    when: needs_rebooting.rc != 0
  - name: Login to quay registry to validate connection
    containers.podman.podman_login:
      username: '{{ registry_admin.username }}'
      password: '{{ registry_admin.password }}'
      registry: '{{ hostvars.registry.ansible_host }}'
